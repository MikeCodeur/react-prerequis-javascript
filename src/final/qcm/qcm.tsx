//DO NOT EDIT THIS FILE !!
import React from 'react'

interface IQuestion {
  question: string
  options: string[]
  answer: string
}

interface IQCMInterface {
  exerciseId: string
  exerciseTitle: string
  quiz: IQuestion[]
}

const QCM: Array<IQCMInterface> = [
  {
    exerciseId: 'src/exercise/01.md',
    exerciseTitle: 'ESModule Import / Export',
    quiz: [
      {
        question:
          "Quelle est l'utilisation recommandée pour déclarer une variable name qui peut changer de valeur ?",
        options: [
          "name = 'Mike'",
          "var name = 'Mike'",
          "const name = 'Mike'",
          "let name = 'Mike'",
        ],
        answer: '3',
      },
      {
        question:
          'Peut-on exporter plusieurs fonctions par defaut dans un module ?',
        options: ['Oui', 'Non'],
        answer: '1',
      },
      {
        question: "Peut-on exporter des variables d'un module ?",
        options: ['Oui', 'Non'],
        answer: '0',
      },
    ],
  },
  {
    exerciseId: 'src/exercise/02.md',
    exerciseTitle: 'JavaScript - Template Literals',
    quiz: [
      {
        question: "Les Templates Literals s'utilisent avec ",
        options: [
          'Des doubles quotes :  "Hello World" ',
          "Des simples quotes :  'Hello World'",
          'Des backquotes `Hello World`',
        ],
        answer: '2',
      },
      {
        question: 'Comment insérer une variables dans la chaine ',
        options: ['+', '=', '${}', '<>'],
        answer: '2',
      },
    ],
  },
  {
    exerciseId: 'src/exercise/03.md',
    exerciseTitle: 'Décomposition et Shorthand property names',
    quiz: [
      {
        question: 'Trouve la bonne syntaxe de décomposition',
        options: [
          'const <nom, prenom, age, ville> = personne',
          'const {.nom, .prenom, .age, .ville} = personne',
          'const {nom, prenom, age, ville} = personne',
        ],
        answer: '2',
      },
      {
        question:
          'Je veux destructuer un array :\n const toto = ["un", "deux", "trois"]',
        options: [
          'const {un, deux, trois, ville} = toto',
          'const [un, deux, trois] = toto',
          'const [un:un, deux:deux, trois:trois] = toto;',
          'destruct(toto)',
        ],
        answer: '1',
      },
    ],
  },
  {
    exerciseId: 'src/exercise/04.md',
    exerciseTitle: 'Fonctions fléchées',
    quiz: [
      {
        question: 'Trouve la mauvaise réponse',
        options: [
          'const somme = (a, b) => a + b',
          'const somme = (a, b) => (a + b)',
          'const somme = (a, b) => {a + b}',
          'const somme = (a, b) => {return a + b}',
        ],
        answer: '2',
      },
      {
        question:
          "Soit : const somme = (a = 5, b = 10) => a + b | Trouver l'erreur ",
        options: [
          'somme() vaut 15',
          'somme(0) vaut 10',
          'somme(5, 5) vaut 10',
          'somme(10) vaut 10',
        ],
        answer: '3',
      },
    ],
  },
  {
    exerciseId: 'src/exercise/05.md',
    exerciseTitle: 'Nullish coalishing / Optionnel chaining / Ternaire',
    quiz: [
      {
        question: 'personne.adresse.ville est-il nullSafe ?',
        options: ['Oui', 'Non'],
        answer: '1',
      },
      {
        question: 'Comment rendre personne.adresse.ville nullSafe ?',
        options: [
          '?.personne.adresse.ville',
          'personne.adresse?.ville',
          'personne?.adresse?.ville',
          'personne??.adresse??.ville',
        ],
        answer: '2',
      },
      {
        question: "let person = name ?? 'anonyme' veut dire ? ",
        options: [
          "person vaut 'anonyme' si null ",
          "person vaut 'anonyme' si null ou undefined",
          "person vaut 'anonyme' toujours",
          "person vaut 'name'toujours",
        ],
        answer: '1',
      },
      {
        question: "La bonne syntaxe d'une ternaire est : ",
        options: [
          "pageCode == 404 ? 'page not found' : 'page found'  ",
          "pageCode == 404 : 'page not found' ? 'page found'",
          "pageCode = 404 ? 'page not found' : 'page found'",
          "pageCode == 404 / 'page not found' : 'page found'",
        ],
        answer: '0',
      },
    ],
  },
  {
    exerciseId: 'src/exercise/06.md',
    exerciseTitle: 'Array : Les Méthodes courantes',
    quiz: [
      {
        question: 'array.find() retourne ...',
        options: [
          'Tous les élements qui remplissent les conditions',
          'Le premier qui rempli les conditions',
        ],
        answer: '1',
      },
      {
        question: 'array.some() retourne ...',
        options: ['Un objet', 'Un boolean', 'Un array', 'un string'],
        answer: '1',
      },
      {
        question: 'array.every() retourne ...',
        options: ['Un objet', 'Un boolean', 'Un array', 'un string'],
        answer: '1',
      },
      {
        question: 'array.map() retourne ...',
        options: [
          'Un objet',
          'Un boolean',
          'Un array',
          'dépend de la condition',
        ],
        answer: '2',
      },
      {
        question: 'array.filter()  ...',
        options: ['Filtre le tableau', 'Retoune un nouveau tableau filtré'],
        answer: '1',
      },
    ],
  },
  {
    exerciseId: 'src/exercise/07.md',
    exerciseTitle: 'Promise aync await',
    quiz: [
      {
        question: 'Un Promise retoune un Boolean',
        options: ['Oui', 'Non'],
        answer: '1',
      },
      {
        question: 'Une Promise prend une fonction à 2 paramètres',
        options: ['Oui', 'Non'],
        answer: '0',
      },
      {
        question: 'Rendre une promise asynchrone avec ',
        options: ['wait ', 'sync', 'async', 'stop'],
        answer: '2',
      },
    ],
  },
]

//export default QCM;

const QcmComponent = () => {
  return <>{JSON.stringify(QCM, null, 2)}</>
}
export default QcmComponent
